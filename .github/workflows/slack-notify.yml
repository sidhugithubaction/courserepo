name: Slack-notification-testing
run-name: We are testing slack notifications, Triggered by @${{ github.actor }}
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore: 
      - 'README.md'
  workflow_dispatch:
  pull_request:

concurrency: 
  cancel-in-progress: true
  group: slack-${{ github.workflow }}-${{ github.head_ref }}

defaults:
  run:
    shell: bash

jobs:
  slack-custom-inprogress:
    name: Slack-custom-inprogress
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/deploy-slack-notification-inprogress
        with:
            deployment_name: ${{ github.repository }}
            slack_channels: 'C06TCB99PE0'
            slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
  buildjob:
    runs-on: ubuntu-22.04
    needs: 
      - slack-custom-inprogress
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: |
          npm ci
  publish_to_docker:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: sidhugithubaction/sidhu-commonactions-workflows/customactions/to-publish-to-docker@v1.0.3
        with:
          image_name: courserepo
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  publish_to_ghcr:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: sidhugithubaction/sidhu-commonactions-workflows/customactions/to-publish-to-ghcr@v1.0.1
        with:
          ghcr_password: ${{ secrets.GHCR_TOKEN }}
  deploy_job:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
      - publish_to_docker
    steps:
      - run: |
          echo "Deploying"
          sleep 1m
  
  register-dora-metrics:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    environment: development
    needs: 
      - publish_to_ghcr
      - deploy_job
    steps:
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - run: |
          curl -X POST \
          'https://app.sleuth.io/api/1/deployments/sidhusaiprasanthorg/courserepo/register_deploy' \
            -H 'Authorization: Bearer ${{ secrets.SLEUTH_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{
            "sha": "${{ env.SHORT_SHA }}",
            "environment": "${{ vars.ENVIRON }}"
          }'

  publish-docker-staging:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: ${{ startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc') }}
    steps:
      - uses: sidhugithubaction/sidhu-commonactions-workflows/customactions/to-publish-to-docker@v1.0.3
        with:
          image_name: courserepo
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}

  publish_to_ghcr_staging:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            ${{ env.SHORT_SHA }}
      - uses: docker/build-push-action@v5
        with:          
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy_to_staging:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    environment:
      name: staging
    needs:
      - publish-docker-staging
      - publish_to_ghcr_staging
    steps:
      - run: |
          echo "Deploying to ${{ vars.ENVIRON }}"

  register-dora-metrics_staging:
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    runs-on: ubuntu-22.04
    environment:
      name: staging
    needs: 
      - publish-docker-staging
      - publish_to_ghcr_staging
      - deploy_to_staging
    steps:
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - run: |
          curl -X POST \
          'https://app.sleuth.io/api/1/deployments/sidhusaiprasanthorg/courserepo/register_deploy' \
            -H 'Authorization: Bearer ${{ secrets.SLEUTH_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{
            "sha": "${{ env.SHORT_SHA }}",
            "environment": "${{ vars.ENVIRON }}"
          }'

  release_to_staging:
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-rc')
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      issues: write
      pull-requests: write
    needs: 
      - register-dora-metrics_staging
    steps:
      - uses: actions/checkout@v4
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Dockerfile
            harbordocs.md
            package.json
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          prerelease: true


  # Production ###################

  publish-docker-production:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: ${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc') }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - uses: docker/login-action@v3
        with:
          # registry: ${{ secrets.HARBOR_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          # images: ${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/courserepo
          images: ${{ secrets.DOCKER_USERNAME }}/courserepo
          tags: |
            ${{ env.SHORT_SHA }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  publish_to_ghcr_production:
    runs-on: ubuntu-22.04
    needs: 
      - buildjob
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - uses: docker/login-action@v3
        with:
          # registry: ${{ secrets.HARBOR_REGISTRY }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          # images: ${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/courserepo
          images: ghcr.io/${{ github.repository }}
          tags: |
            ${{ env.SHORT_SHA }}
      - uses: docker/build-push-action@v5
        with:          
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy_to_prod:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
    environment:
      name: production
    needs:
      - publish-docker-production
      - publish_to_ghcr_production
    steps:
      - run: |
          echo "Deploying to ${{ vars.ENVIRON }}"


  register-dora-metrics_production:
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
    runs-on: ubuntu-22.04
    environment:
      name: production
    needs: 
      - publish-docker-production
      - publish_to_ghcr_production
      - deploy_to_prod
    steps:
      - run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> "$GITHUB_ENV" 
          echo $SHORT_SHA
      - run: |
          curl -X POST \
          'https://app.sleuth.io/api/1/deployments/sidhusaiprasanthorg/courserepo/register_deploy' \
            -H 'Authorization: Bearer ${{ secrets.SLEUTH_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{
            "sha": "${{ env.SHORT_SHA }}",
            "environment": "${{ vars.ENVIRON }}"
          }'

  release_to_prod:
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      issues: write
      pull-requests: write
    needs: 
      - register-dora-metrics_production
    steps:
      - uses: actions/checkout@v4
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Dockerfile
            harbordocs.md
            package.json
          token: ${{ secrets.GITHUB_TOKEN }}   

  notify-slack-custom:
    name: Slack-custom-notify
    runs-on: ubuntu-22.04
    needs:
      - slack-custom-inprogress
      - buildjob
      - publish_to_docker
      - publish_to_ghcr
      - deploy_job
      - register-dora-metrics
      - publish-docker-staging
      - publish_to_ghcr_staging
      - deploy_to_staging
      - register-dora-metrics_staging
      - release_to_staging
      - publish-docker-production
      - publish_to_ghcr_production
      - deploy_to_prod
      - register-dora-metrics_production
      - release_to_prod
    steps:
      - uses: actions/checkout@v4
      - name: Send notification on job success
        if: success()
        uses: ./.github/actions/deploy-slack-notification-success
        with:
            deployment_name: ${{ github.repository }}
            slack_channels: 'C06TCB99PE0'
            slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Send notification on Job Failure
        if: failure()
        uses: ./.github/actions/deploy-slack-notification-failure
        with:
          deployment_name: ${{ github.repository }}
          slack_channels: 'C06TCB99PE0'
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}


